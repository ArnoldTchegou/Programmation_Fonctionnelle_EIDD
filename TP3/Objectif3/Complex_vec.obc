-- Code generated by the MiniLucid Compiler
open Complex_add
machine somme_vec<<n:int>> =
  obj n_1 : Complex_add.complex_add[n];
  
  step(a: Complex_add.complex^n, b: Complex_add.complex^n)
  returns (v_1: Complex_add.complex^n) {
    for i: int = 0 to n {
       (v_1[i]) = n_1[i].step(a[i], b[i]) 
    }
  }

machine somme_element_vec<<n:int>> =
  obj n_2 : Complex_add.complex_add[n];
  
  step(a: Complex_add.complex^n) returns (n_1: Complex_add.complex) {
    var x: Complex_add.complex;
    x = { Complex_add.re = 0.000000; Complex_add.im = 0.000000 };
    n_1 = x;
    for i: int = 0 to n {
       (n_1) = n_2[i].step(a[i], n_1) 
    }
  }


